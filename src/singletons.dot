digraph G{
	fontname = "Bitstream Vera Sans"
	fontsize = 16

node [
	fontname = "Bitstream Vera Sans"
	fontsize = 16

        shape = "record"
]
edge [
	fontname = "Bitstream Vera Sans"
	fontsize = 16
]
FilterInputStream [ 
center=true
    label="{FilterInputStream|#in: InputStream \l | +read(byte[],int,i): int\l+markSupported(): boolean\l+available(): int\l+reset(): void\l+skip(lo): long\l#\<init\>(InputStre): void\l+close(): void\l+mark(i): void\l}"color = black
style = filled 
 fillcolor = white
]
Runtime [ 
center=true
    label="{Runtime\n\<\<Singleton\>\>|-static currentRuntime: Runtime \l | +traceMethodCalls(boole): void\l+loadLibrary(Stri): void\l+availableProcessors(): int\l+addShutdownHook(Thre): void\l-static runFinalization0(): void\l+static runFinalizersOnExit(boole): void\l+getLocalizedOutputStream(OutputStre): OutputStream\l-\<init\>(): void\l+maxMemory(): long\lload0(Class,Stri): void\l+exit(i): void\l+halt(i): void\l+getLocalizedInputStream(InputStre): InputStream\l+totalMemory(): long\l+load(Stri): void\l+removeShutdownHook(Thre): boolean\lloadLibrary0(Class,Stri): void\l+gc(): void\l+static getRuntime(): Runtime\l+freeMemory(): long\l+traceInstructions(boole): void\l+exec(String[],String[],Fi): Process\lstatic \<clinit\>(): void\l+runFinalization(): void\l}"color = blue
style = filled 
 fillcolor = white
]
SingletonLazy [ 
center=true
    label="{SingletonLazy\n\<\<Singleton\>\>|-static singleton: SingletonLazy \l | #static demoMethod(): void\l+static getInstance(): SingletonLazy\l-\<init\>(): void\l}"color = blue
style = filled 
 fillcolor = white
]
Desktop [ 
center=true
    label="{Desktop|-peer: DesktopPeer \l | -checkExec(): void\l+mail(U): void\l+edit(Fi): void\l-checkActionSupport(Desktop$Acti): void\l-checkAWTPermission(): void\l+isSupported(Desktop$Acti): boolean\l-\<init\>(): void\l-static checkFileValidation(Fi): void\l+print(Fi): void\l+static getDesktop(): Desktop\l+static isDesktopSupported(): boolean\l+open(Fi): void\l+browse(U): void\l}"color = black
style = filled 
 fillcolor = white
]
Calendar [ 
center=true
    label="{Calendar|+static MONTH: int \l+static THURSDAY: int \l+static WEEK_OF_MONTH: int \l+static DECEMBER: int \lstatic HOUR_OF_DAY_MASK: int \l+static DAY_OF_WEEK_IN_MONTH: int \l-static MINIMUM_USER_STAMP: int \lstatic WEEK_OF_YEAR_MASK: int \l+static WEDNESDAY: int \lstatic YEAR_MASK: int \l+static YEAR: int \l+static WEEK_OF_YEAR: int \l+static FIELD_COUNT: int \l-zone: TimeZone \l+static SATURDAY: int \l-sharedZone: boolean \l+static MINUTE: int \l-serialVersionOnStream: int \lstatic HOUR_MASK: int \l+static JANUARY: int \lstatic DAY_OF_YEAR_MASK: int \l+static DST_OFFSET: int \l+static SUNDAY: int \l#isSet: boolean[] \l+static TUESDAY: int \l+static SEPTEMBER: int \l+static AM: int \lstatic ERA_MASK: int \lareAllFieldsSet: boolean \l+static DATE: int \lstatic SECOND_MASK: int \l+static ERA: int \l-minimalDaysInFirstWeek: int \lstatic MINUTE_MASK: int \lstatic MILLISECOND_MASK: int \l+static AUGUST: int \l+static JULY: int \l+static DAY_OF_WEEK: int \l#fields: int[] \lstatic DST_OFFSET_MASK: int \l+static DAY_OF_YEAR: int \l+static MAY: int \l+static DAY_OF_MONTH: int \l+static HOUR: int \l+static FRIDAY: int \l+static AM_PM: int \l+static FEBRUARY: int \l-stamp: int[] \l+static ALL_STYLES: int \lstatic currentSerialVersion: int \l-lenient: boolean \l+static ZONE_OFFSET: int \lstatic serialVersionUID: long \l+static HOUR_OF_DAY: int \l+static UNDECIMBER: int \lstatic AM_PM_MASK: int \l-static cachedLocaleData: Hashtable \l-static UNSET: int \l-static FIELD_NAME: String[] \l+static APRIL: int \l+static LONG: int \lstatic DATE_MASK: int \l+static JUNE: int \l-static COMPUTED: int \lstatic DAY_OF_WEEK_IN_MONTH_MASK: int \l+static OCTOBER: int \lstatic DAY_OF_MONTH_MASK: int \lstatic $assertionsDisabled: boolean \l+static NOVEMBER: int \l#isTimeSet: boolean \l+static SHORT: int \lstatic ALL_FIELDS: int \l+static MONDAY: int \lstatic MONTH_MASK: int \l-nextStamp: int \lstatic WEEK_OF_MONTH_MASK: int \lstatic DAY_OF_WEEK_MASK: int \l-firstDayOfWeek: int \lstatic ZONE_OFFSET_MASK: int \l+static MARCH: int \l+static SECOND: int \l+static MILLISECOND: int \l#time: long \l+static PM: int \l#areFieldsSet: boolean \l | selectFields(): int\lsetZoneShared(boole): void\lstatic isFieldSet(int,i): boolean\l+before(Obje): boolean\l+getTimeZone(): TimeZone\l-static createCalendar(TimeZone,Loca): Calendar\l+setMinimalDaysInFirstWeek(i): void\l+compareTo(Obje): int\l#computeFields(): void\l+getActualMaximum(i): int\l+getMinimum(i): int\linternalSet(int,i): void\lisExternallySet(i): boolean\l+static getAvailableLocales(): Locale[]\l-static aggregateStamp(int,i): int\l-setWeekCountData(Loca): void\l+setTime(Da): void\l#internalGet(i): int\l+add(int,i): void\l-static getMillisOf(Calend): long\l+isSet(i): boolean\lsetFieldsComputed(i): void\l+getLeastMaximum(i): int\l-writeObject(ObjectOutputStre): void\l+getTimeInMillis(): long\lgetZone(): TimeZone\l#\<init\>(TimeZone,Loca): void\l-readObject(ObjectInputStre): void\lsetUnnormalized(): void\lisFullyNormalized(): boolean\l+getDisplayName(int,int,Loca): String\lstatic getFieldName(i): String\lstatic \<clinit\>(): void\l+getMinimalDaysInFirstWeek(): int\l+getGreatestMinimum(i): int\l-getDisplayNamesImpl(int,int,Loca): Map\l-invalidateWeekFields(): void\l+getTime(): Date\l+isLenient(): boolean\l+roll(int,i): void\l-adjustStamp(): void\lcheckDisplayNameParams(int,int,int,int,Locale,i): boolean\l+getMaximum(i): int\l+setLenient(boole): void\lsetFieldsNormalized(i): void\lgetSetStateFields(): int\lisPartiallyNormalized(): boolean\l+hashCode(): int\l+get(i): int\l+setTimeZone(TimeZo): void\l+after(Obje): boolean\l+getDisplayNames(int,int,Loca): Map\l+set(int,int,int,int,int,i): void\l+clear(i): void\l+getActualMinimum(i): int\l+setFirstDayOfWeek(i): void\l-updateTime(): void\l+getFirstDayOfWeek(): int\l+setTimeInMillis(lo): void\l#computeTime(): void\l+equals(Obje): boolean\l+clone(): Object\l-getFieldStrings(int,int,DateFormatSymbo): String[]\l+toString(): String\l+static getInstance(TimeZone,Loca): Calendar\l-static appendValue(StringBuilder,String,boolean,lo): void\l#complete(): void\l}"color = black
style = filled 
 fillcolor = white
]
SingletonEager [ 
center=true
    label="{SingletonEager\n\<\<Singleton\>\>|-static singleton: SingletonEager \l | #static demoMethod(): void\l+static getInstance(): SingletonEager\l-\<init\>(): void\lstatic \<clinit\>(): void\l}"color = blue
style = filled 
 fillcolor = white
]
FilterInputStream -> FilterInputStream[arrowhead = vee, style = dotted]
Runtime -> Runtime[arrowhead = veenull]
Runtime -> Runtime[arrowhead = vee, style = dotted]
SingletonLazy -> SingletonLazy[arrowhead = veenull]
SingletonLazy -> SingletonLazy[arrowhead = vee, style = dotted]
Desktop -> Desktop[arrowhead = vee, style = dotted]
Calendar -> Calendar[arrowhead = vee, style = dotted]
SingletonEager -> SingletonEager[arrowhead = veenull]
SingletonEager -> SingletonEager[arrowhead = vee, style = dotted]


}