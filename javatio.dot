digraph G{
	fontname = "Bitstream Vera Sans"
	fontsize = 16

node [
	fontname = "Bitstream Vera Sans"
	fontsize = 16

 shape = "record"
]
edge [
	fontname = "Bitstream Vera Sans"
	fontsize = 16
]
InputStreamReader [ 
center=true
    label="{InputStreamReader\n\<\<adapter\>\>|-sd: StreamDecoder \l | +getEncoding(): String\l+read(char[],int,i): int\l+ready(): boolean\l+\<init\>(InputStream,CharsetDecod): void\l+close(): void\l}"color = black
style = filled 
 fillcolor = firebrick
]
StreamDecoder [ 
center=true
    label="{StreamDecoder\n\<\<adaptee\>\>|-cs: Charset \l-bb: ByteBuffer \l-static MIN_BYTE_BUFFER_SIZE: int \l-leftoverChar: char \l-isOpen: boolean \l-in: InputStream \l-ch: ReadableByteChannel \l-haveLeftoverChar: boolean \lstatic $assertionsDisabled: boolean \l-static DEFAULT_BYTE_BUFFER_SIZE: int \l-static channelsAvailable: boolean \l-decoder: CharsetDecoder \l | implClose(): void\l+read(char[],int,i): int\l+static forDecoder(ReadableByteChannel,CharsetDecoder,i): StreamDecoder\l-inReady(): boolean\lencodingName(): String\limplReady(): boolean\l\<init\>(ReadableByteChannel,CharsetDecoder,i): void\limplRead(char[],int,i): int\l-read0(): int\l+getEncoding(): String\l-isOpen(): boolean\l-static getChannel(FileInputStre): FileChannel\l-ensureOpen(): void\l+ready(): boolean\l-readBytes(): int\l+close(): void\l+static forInputStreamReader(InputStream,Object,CharsetDecod): StreamDecoder\lstatic \<clinit\>(): void\l}"color = black
style = filled 
 fillcolor = firebrick
]
Reader [ 
center=true
    label="{Reader\n\<\<target\>\>|-skipBuffer: char[] \l#lock: Object \l-static maxSkipBufferSize: int \l | +abstract read(char[],int,i): int\l+ready(): boolean\l+markSupported(): boolean\l+reset(): void\l+skip(lo): long\l#\<init\>(Obje): void\l+abstract close(): void\l+mark(i): void\l}"color = black
style = filled 
 fillcolor = firebrick
]
InputStreamReader -> Reader[arrowhead = vee, style = dotted]
InputStreamReader -> Reader [arrowhead = onormal]
InputStreamReader -> StreamDecoder [arrowhead = vee,label="\<\<Adapts\>\>"]
InputStreamReader -> StreamDecoder[arrowhead = vee, style = dotted]
StreamDecoder -> Reader[arrowhead = vee, style = dotted]
StreamDecoder -> Reader [arrowhead = onormal]
StreamDecoder -> StreamDecoder[arrowhead = vee, style = dotted]
Reader -> Reader[arrowhead = vee, style = dotted]


}