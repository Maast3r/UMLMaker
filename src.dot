digraph G{
	fontname = "Comic Sans"
	fontsize = 16

node [
	fontname = "Comic Sans"
	fontsize = 16

        shape = "record"
]
edge [
	fontname = "Comic Sans"
	fontsize = 16
]
ClassFieldVisitor [ 
    label="{ClassFieldVisitor| | +\<init\>(int, ClassVisitorBuffered): void\l+visitField(int, String, String, String, Object): FieldVisitor\l}"]

ClassMethodVisitor [ 
    label="{ClassMethodVisitor| | +\<init\>(int, ClassVisitorBuffered): void\l+\<init\>(int, StringBuffer): void\l+visitMethod(int, String, String, String, String[]): MethodVisitor\l}"]

ClassPrototype [ 
    label="{ClassPrototype|-name: String \l-accessModifiers: String[] \l | +\<init\>(): void\l}"]

ClassVisitorBuffered [ 
    label="{ClassVisitorBuffered|buf: StringBuffer \l | +\<init\>(int, ClassVisitor, StringBuffer): void\l+\<init\>(int): void\l+\<init\>(int, ClassVisitor): void\l+getAccessModifier(int): String\l}"]

FirstASM [ 
    label="{FirstASM|-font: String \l | \<clinit\>(): void\l+\<init\>(): void\l+main(String[]): void\l+getClassDetails(String, String, StringBuffer): void\l+getInheritance(String, String): ArrayList\l+pairToViz(String): String\l+listClasses(File): HashMap\l+visualize(String): void\l}"]

ClassDeclarationVisitor [ 
    label="{ClassDeclarationVisitor| | +\<init\>(int): void\l+\<init\>(int, StringBuffer): void\l+visit(int, int, String, String, String, String[]): void\l}"]

ClassInheritanceVisitor [ 
    label="{ClassInheritanceVisitor| | +\<init\>(int): void\l+\<init\>(int, StringBuffer): void\l+visit(int, int, String, String, String, String[]): void\l}"]

DesignParser [ 
    label="{DesignParser| | +\<init\>(): void\l+main(String[]): void\l}"]

UMLMaker [ 
    label="{UMLMaker| | +\<init\>(): void\l+main(String[]): void\l}"]

ClassFieldVisitor -> ClassVisitorBuffered [shape = onormal]
ClassMethodVisitor -> ClassVisitorBuffered [shape = onormal]
ClassPrototype -> Object [shape = onormal]
ClassVisitorBuffered -> ClassVisitor [shape = onormal]
FirstASM -> Object [shape = onormal]
ClassDeclarationVisitor -> ClassVisitorBuffered [shape = onormal]
ClassInheritanceVisitor -> ClassVisitorBuffered [shape = onormal]
DesignParser -> Object [shape = onormal]
UMLMaker -> Object [shape = onormal]
}